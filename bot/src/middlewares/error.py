from aiogram import BaseMiddleware
from aiogram.types import Message
from typing import Awaitable, Callable, Dict, Any


class ErrorMiddleware(BaseMiddleware):
    async def __call__(
                self,
                handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
                event: Message, 
                data: Dict[str, Any]) -> Any:
        try:
            result = await handler(event, data)
            print(result)
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None, –∑–Ω–∞—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            if result is None:
                await event.answer("–ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è! ü§î")
        except Exception as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            await event.answer(f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üò¨ –û—à–∏–±–∫–∞: {str(e)}")
        
        return result
