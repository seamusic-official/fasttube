from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from src.run import global_state
from src.states import CreateVideo, CreateVideoFromVideo
from src.utils.file_actions import delete_file, download_and_save_audio, download_and_save_photo, download_and_save_video
from src.utils.moviepy import create_instagram_video_with_centered_image, create_instagram_video_with_repeating_video, create_video_with_repeating_video, create_video_with_stretched_image
from src.keyboards.screen_resolutions import screen_resolution_photo_type, screen_resolution_video_type
from src.keyboards.menu import youtube
from src.keyboards.main import main


create_video_router = Router()

@create_video_router.callback_query(lambda query: query.data in ['yt_video', 'ig_video'])
async def process_callback_video_type(callback_query: CallbackQuery):
    answer = callback_query.data
    chat_id = callback_query.message.chat.id
    
    if chat_id in global_state:
        if answer == 'yt_video':
            await create_video_from_video_for_youtube(callback_query.message)
        elif answer == 'ig_video':
            await create_video_from_video_for_instagram(callback_query.message)

@create_video_router.callback_query(lambda query: query.data in ['yt_photo', 'ig_photo'])
async def process_callback_photo_type(callback_query: CallbackQuery):
    answer = callback_query.data
    chat_id = callback_query.message.chat.id
    
    if chat_id in global_state:
        if answer == 'yt_photo':
            await create_video_for_youtube(callback_query.message)
        elif answer == 'ig_photo':
            await create_video_for_instagram(callback_query.message)


@create_video_router.message(F.text == "üéÜ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ")
@create_video_router.message(Command("create_with_photo"))
async def create_video(message: Message, state: FSMContext):
    photo = FSInputFile("src/assets/photovideo.jpg")
    await message.answer_photo(photo=photo,
                               caption="–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–∫–∏–Ω—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ –≤–∏–¥–∞ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å. –ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∏–Ω—É—Ç—å mp3 –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (YouTube, Instagram)",
                               reply_markup=main)

    await state.set_state(CreateVideo.image)

@create_video_router.message(CreateVideo.image, F.photo)
async def get_photo(message: Message):
    chat_id = message.chat.id
    if chat_id not in global_state:
        global_state[chat_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

    try:
        file_id = message.photo[-1].file_id
        global_state[chat_id]["photo_id"] = await download_and_save_photo(message, file_id)
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∞ mp3.")
    
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@create_video_router.message(CreateVideo.image, F.audio)
async def get_audio(message: Message):
    chat_id = message.chat.id
    if chat_id in global_state:
        try:
            photo_path = global_state[chat_id]["photo_id"]
            audio_file_id = message.audio.file_id
            audio_path = await download_and_save_audio(message, audio_file_id)
            global_state[chat_id] = {"photo_path": photo_path, "audio_path": audio_path}
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: ", reply_markup=screen_resolution_photo_type)
        
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
    else:
        await message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∑–∏ —Å–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª.", reply_markup=main)

@create_video_router.message(F.text == "üéÜ –ó–∞—Ü–∏–∫–ª–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ –¥–ª–∏–Ω–µ mp3")
@create_video_router.message(Command("create_with_video"))
async def create_video_from_video(message: Message, state: FSMContext):
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞—é—â–µ–≥–æ—Å—è –≤–∏–¥–µ–æ –ø–æ –¥–ª–∏–Ω–µ mp3, —Å–∫–∏–Ω—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–æ–≥–æ –≤–∏–¥–∞ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å. –ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∏–Ω—É—Ç—å mp3 –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (YouTube, Instagram)")
    await state.set_state(CreateVideoFromVideo.video)

@create_video_router.message(CreateVideoFromVideo.video, F.video)
async def get_video_for_video_from_video(message: Message):
    
    chat_id = message.chat.id
    if chat_id not in global_state:
        global_state[chat_id] = {}

    file_id = message.video.file_id
    global_state[chat_id]["video_id"] = await download_and_save_video(message, file_id)
    await message.answer("–í–∏–¥–µ–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∞ mp3.")


@create_video_router.message(CreateVideoFromVideo.video, F.audio)
async def get_audio_for_video_from_video(message: Message):
    chat_id = message.chat.id
    if chat_id in global_state:
        video_path = global_state[chat_id]["video_id"]
        audio_file_id = message.audio.file_id
        audio_path = await download_and_save_audio(message, audio_file_id)
        global_state[chat_id] = {"video_path": video_path, "audio_path": audio_path}
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: ", reply_markup=screen_resolution_video_type)
    else:
        await message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∑–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∞ –∑–∞—Ç–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª.")

async def create_video_from_video_for_youtube(message: Message):
    chat_id = message.chat.id
    if chat_id in global_state:
        await message.answer("–ù–∞—á–∞–ª–æ—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —é—Ç—É–±–µ! –û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã")

        video_path = global_state[chat_id]["video_path"]
        audio_path = global_state[chat_id]["audio_path"]

        video_data = await create_video_with_repeating_video(audio_path, video_path)

        await message.answer("–£—Å–ø–µ—à–Ω–æ!", reply_markup=youtube)

        video_input = FSInputFile(video_data["video_path"])
        await message.answer_video(video_input, reply_markup=main)

async def create_video_for_youtube(message: Message):
    chat_id = message.chat.id
    if chat_id in global_state:
        try:
            await message.answer("–ù–∞—á–∞–ª–æ—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —é—Ç—É–±–∞! –û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã")

            photo_path = global_state[chat_id]["photo_path"]
            audio_path = global_state[chat_id]["audio_path"]

            video_data = await create_video_with_stretched_image(audio_path, photo_path)

            await message.answer("–£—Å–ø–µ—à–Ω–æ!")

            video_input = FSInputFile(video_data["video_path"])
            await message.answer_video(video_input, reply_markup=main)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞ —é—Ç—É–±. (—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ - @fasttubeofficial)", reply_markup=youtube)
            
            await delete_file(video_data["video_path"])
            await delete_file(photo_path)
            await delete_file(audio_path)
        except Exception as e:
            await message.answer(f"–û–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è —é—Ç—É–±–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

async def create_video_for_instagram(message: Message):
    chat_id = message.chat.id
    if chat_id in global_state:
        try:
            await message.answer("–ù–∞—á–∞–ª–æ—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞! –û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã")

            photo_path = global_state[chat_id]["photo_path"]
            audio_path = global_state[chat_id]["audio_path"]

            video_data = await create_instagram_video_with_centered_image(audio_path, photo_path)

            await message.answer("–£—Å–ø–µ—à–Ω–æ!")

            video_input = FSInputFile(video_data["video_path"])
            await message.answer_video(video_input)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –ø–ª–æ—â–∞–¥–∫–∏. (—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ - @fasttubeofficial)")
            
            await delete_file(video_data["video_path"])
            await delete_file(photo_path)
            await delete_file(audio_path)
        except Exception as e:
            await message.answer(f"–û–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

async def create_video_from_video_for_instagram(message: Message):
    chat_id = message.chat.id
    if chat_id in global_state:
        await message.answer("–ù–∞—á–∞–ª–æ—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –∏–Ω—Å—Ç—Ä–∞–≥—Ä–∞–º–∞! –û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã")

        try:
            video_path = global_state[chat_id]["video_path"]
            audio_path = global_state[chat_id]["audio_path"]

            video_data = await create_instagram_video_with_repeating_video(audio_path, video_path)

            await message.answer("–£—Å–ø–µ—à–Ω–æ!")

            video_input = FSInputFile(video_data["video_path"])
            await message.answer_video(video_input, youtube)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –ø–ª–æ—â–∞–¥–∫–∏. (—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ - @fasttubeofficial)", reply_markup=main)

            await delete_file(video_data["video_path"])
            await delete_file(video_path)
            await delete_file(audio_path)

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ!")
