from aiogram import BaseMiddleware
from aiogram.types import Message, Update
from typing import Awaitable, Callable, Dict, Any
from src.repositories.auth import UserRepository


class AuthMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]], event: Update, data: Dict[str, Any]) -> Any:
        message = event.message
        if not message:
            return await handler(event, data)

        user_repo = UserRepository()  # –ü—Ä–æ–≤–µ—Ä—å, –∫–∞–∫ —Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å —ç—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        
        try:
            existing_user = await user_repo.get_users_with_filters(telegram_id=str(message.from_user.id))
            print("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", existing_user)

            if existing_user is None or next(existing_user, None) is None:
                response = await user_repo.add_user(
                    username=message.from_user.username or f"ftuser-{message.from_user.id}",
                    full_name=message.from_user.full_name,
                    telegram_id=str(message.from_user.id)
                )
                print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", response)
                await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! üéâ")
            else:
                await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã")

            users = await user_repo.get_scalars_users()
            await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {[user.telegram_id for user in users]}")

            return await handler(event, data)
        except Exception as e:
            await message.answer(f"–£–ø—Å! –ß–µ—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @seamusicmgmtbot \n–û—à–∏–±–∫–∞: {str(e)}")