from aiogram import BaseMiddleware
from aiogram.types import Message, Update
from typing import Awaitable, Callable, Dict, Any
from repositories.auth import UserRepository


class AuthMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]], event: Update, data: Dict[str, Any]) -> Any:
        message = event.message
        if not message:
            return await handler(event, data)  # If there's no message, just proceed as normal.

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await UserRepository.get_all_users(telegram_id=message.from_user.id)
            
            if not existing_user:  # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
                await UserRepository.add_user(
                    username=message.from_user.username if message.from_user.username else f"ftuser-{message.from_user.id}",
                    full_name=message.from_user.full_name,
                    telegram_id=message.from_user.id
                )
                await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã!")
            else:
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üëã")

            users = await UserRepository.get_all_users()
            await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join(user.username for user in users)}")

            return await handler(event, data)
        except Exception as e:
            await message.answer(f"Oops! Something went wrong! üò¨ Error: {str(e)}")